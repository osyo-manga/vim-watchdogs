*watchdogs.txt*	quickrun.vim を使用したシンタックスチェックを行うプラグインで
す。


==============================================================================
目次						*watchdogs-contents*

概要				|watchdogs-introduction|
使い方				|watchdogs-usage|
対応しているシンタックスチェックツール				|watchdogs-tools|
コンフィグ			|watchdogs-config|
  filetype ごとにツールを設定	  |watchdogs-config-filetype|
  ツールの設定を追加		  |watchdogs-config-tools|
  watchdogs_checker/* 全てに共通する設定を定義			  |watchdogs-config-default|
自動シンタックスチェック	|watchdogs-auto|
  ファイルの書き込み後		  |watchdogs-auto-BufWritePost|
  一定時間キー入力がなかった場合にチェックを行う		  |watchdogs-auto-CursorHold|
インターフェース		|watchdogs-interface|
  コマンド			  |watchdogs-commands|
  関数				  |watchdogs-functions|
設定				|watchdogs-setting|
  変数				  |watchdogs-variables|
設定例				|watchdogs-examples|
  C++				  |watchdogs-examples-cpp|
  quickfix のエラーフォマットを指定する				  |watchdogs-examples-erroformat|
  command を変更する		  |watchdogs-examples-command|
  quickfix ウィンドウを自動的に閉じる				  |watchdogs-examples-close_quickfix|
  quickfix ウィンドウを開かせない				  |watchdogs-examples-unopen_quickfix|
  vimproc の更新間隔を短くする	  |watchdogs-examples-updatetime|
  一部の filetype のみ無効にする				  |watchdogs-examples-disable|
  新しいツールを定義する	  |watchdogs-examples-add_tool|
  filetype に対して指定したツールを設定する			  |watchdogs-examples-change_tool|


==============================================================================
概要						*watchdogs-introduction*

*watchdogs.vim* は thinca 氏が作成された |quickrun| をバックエンドとしたシンタック
スチェックを行うためのプラグインです。
|quickrun| をバックエンドに使用することで、非同期でシンタックスチェックを行う
ことができ、さらに幅広い拡張を行うこともできます。
本プラグインを使用するにあたって予め下記のプラグインを導入しておく必要があ
ります。
す。

- vim-quickrun - github : https://github.com/thinca/vim-quickrun
  quickrun

- vimproc - github : https://github.com/Shougo/vimproc
  quickrun で非同期を行うためのプラグイン

- shabadou.vim - github : https://github.com/osyo-manga/shabadou.vim
  汎用的な quickrun-hook をまとめたプラグイン



また、下記のプラグインも導入しておくと利便性が上がります。

- vim-hier - github : https://github.com/jceb/vim-hier
  quickfix の該当するコード箇所のハイライトを行う
  本プラグインはデフォルトではハイライトの機能はないので、vim-hier などの外部
  プラグインを使用する必要があります

- quickfixstatus - https://github.com/dannyob/quickfixstatus
  quickfix の該当箇所にカーソルを移動させるとエラー内容がコマンドウィンドウに
  出力される

本プラグインは quickfix へと出力を行なっているので、上記のような quickfix を参
照するプラグインを使用することが出来ます。


各シンタックスチェックを行うための設定方法や拡張方法などは |g:quickrun_config|
と同じなので予め |g:quickrun_config| を読んでおくとスムーズに設定を行うことが
出来ると思います。


						*watchdogs-synopsis*
>
	" 現在の filetype に沿ったシンタックスチェックを行う
	" 出力は quickfix に行われる
	:WatchdogsRun
<


また、コマンドから呼び出す以外にもファイルの保存時や一定時間キー入力を行われな
かった場合等に自動的でシンタックスチェックを行うこともできます。


==============================================================================
使い方						*watchdogs-usage*

|:WatchdogsRun| コマンドで |g:quickrun_config| の設定を参照し、シンタックス
チェックを行います。

>
	" WatchdogsRun でシンタックスチェックを行います
	:WatchdogsRun
	
	" 使用するチェッカーを指定する
	WatchdogsRun watchdogs_checker/g++

	" :QuickRun と同様の引数も渡すことが出来ます
	WatchdogsRun watchdogs_checker/g++ -cmdopt -Wall
<


また、下記の設定することで任意のタイミングに自動的にチェックを行うこと
も出来ます。

>
	" ファイルの書き込み後にシンタックスチェックを行う
	" 使用する場合は任意の filetype のキーで 1 を設定する
	let g:watchdogs_check_BufWritePost_enables = {
	\	"haskell" : 1
	\}
<


==============================================================================
対応しているシンタックスチェックツール		*watchdogs-tools*

|watchdogs.vim| で既に定義されているシンタックスチェックの為のツールは次の通り
です。


- "g++"
  gcc の -fsyntax-only オプションで C++ のシンタックスチェックを行います。

- "g++03"
  gcc の -fsyntax-only オプションで C++ のシンタックスチェックを行います。
  "g++" と違い -std=gnu++0x  オプションはついていません。

- "clang++"
  clang の -fsyntax-only オプションで C++ のシンタックスチェックを行います。

- "clang++03"
  clang の -fsyntax-only オプションで C++ のシンタックスチェックを行います。
  "clang++" と違い -std=gnu++0x  オプションはついていません。

- "clang-check"
   clang の clang-check ツールを使用したシンタックスチェック
   参照:http://clang.llvm.org/docs/ClangCheck.html

- "msvc"
  cl.exe の /Zs オプションで C++ のシンタックスチェックを行います。

- "ruby"
  ruby の -c オプションで Ruby のシンタックスチェックを行います。

- "rubocop"
  rubocop を使用して Ruby のシンタックスチェックを行います。
  bbatsov/rubocop - https://github.com/bbatsov/rubocop

- "javac"
  javac を使用した Java のシンタックスチェックを行います。
  classpathの設定は行っていませんので、必要に応じてcmdoptに追加してください。

- "jshint"
  jshint を使用した JavaScript のシンタックスチェックを行います。

- "eslint"
  eslint を使用した JavaScript のシンタックスチェックを行います。

- "ghc-mod"
  ghc-mod を使用した Haskell のシンタックスチェックを行います。

- "hlint"
  hlint を使用した Haskell のシンタックスチェックを行います。

- "hdevtools"
  hdevtools を使用した Haskell のシンタックスチェックを行います。

- "pyflakes"
  pyflakes を使用した Python のシンタックスチェックを行います。

- "flake8"
  flake8 を使用した Python のシンタックスチェックを行います。

- "perl"
  perl の -c オプションで perl のシンタックスチェックを行います。

- "php"
  php の -l オプションで php のシンタックスチェックを行います。

- "phpcs"
  PHP_CodeSniffer の --report=emacs オプションで php のシンタックスチェックを行います。
  squizlabs/PHP_CodeSniffer - https://github.com/squizlabs/PHP_CodeSniffer

- "phpmd"
  PHP Mess Detector の cleancode,codesize,design,naming,unusedcode オプションで php のシンタックスチェックを行います。
  phpmd/phpmd - https://github.com/phpmd/phpmd

- "luac"
  luac を使用した lua のシンタックスチェックを行います。

- "dmd"
  dmd の -c オプションで D言語のシンタックスチェックを行います。

- "gofmt"
  gofmt で GO言語のシンタックスチェックを行います。

- "govet"
  govet で GO言語のシンタックスチェックを行います。

- "golint"
  golint で GO言語のシンタックスチェックを行います。
  golang/lint - https://github.com/golang/lint

- "go_vet"
  go の vet オプションで GO言語のシンタックスチェックを行います。

- "gcc"
  gcc の -fsyntax-only オプションで C言語のシンタックスチェックを行います。

- "clang"
  clang の -fsyntax-only オプションで C言語のシンタックスチェックを行います。

- "vimparse.pl"
  vimparse.pl で perl のシンタックスチェックを行います。

- "scalac"
  scalac で scala のシンタックスチェックを行います。

- "sh"
  sh で sh のシンタックスチェックを行います。

- "shellcheck"
  shellcheck で sh のシンタックスチェックを行います。
  koalaman/shellcheck - https://github.com/koalaman/shellcheck

- "bashate"
  bashate で sh のシンタックスチェックを行います。
  openstack-dev/bashate - https://github.com/openstack-dev/bashate

- "checkbashisms"
  checkbashisms で sh のシンタックスチェックを行います。
  devscripts/checkbashisms - http://debian.inode.at/debian/pool/main/d/devscripts/

- "zsh"
  zsh で zsh のシンタックスチェックを行います。

- "sass"
  sass で --check オプションで sass のシンタックスチェックを行います。

- "scss"
  scss で --check オプションで scss のシンタックスチェックを行います。

- "scss-lint"
  scss-lint で scss のシンタックスチェックを行います。
  brigade/scss-lint - https://github.com/brigade/scss-lint

- "stylelint"
  stylelint で css または scss のシンタックスチェックを行います。
  stylelint/stylelint - https://github.com/stylelint/stylelint

- "tsc"
  tsc で typescript のシンタックスチェックを行います。

- "tslint"
  tslint で typescript のシンタックスチェックを行います。
  palantir/tslint - https://github.com/palantir/tslint

- "coffee"
  coffee の -c -l オプションで coffee のシンタックスチェックを行います。

  coffeelint で coffee のシンタックスチェックを行います。

- "csslint"
  csslint で CSS のシンタックスチェックを行います。
  CSSLint/csslint - https://github.com/CSSLint/csslint

- "vint"
  vint で Vim script のシンタックスチェックを行います。
  Kuniwak/vint - https://github.com/Kuniwak/vint

- "vimlint"
  vim-vimlint で Vim script のシンタックスチェックを行います。
  syngan/vim-vimlint - https://github.com/syngan/vim-vimlint

- "vimlint_by_dbakker"
  vim-lint で Vim script のシンタックスチェックを行います。
  dbakker/vim-lint - https://github.com/dbakker/vim-lint

- "haml"
  haml の --check --trace オプションで haml のシンタックスチェックを
  行います。

- "haml-lint"
  haml-lint で haml のシンタックスチェックを行ないます。
  causes/haml-lint - https://github.com/causes/haml-lint

- "jsonlint"
  jsonlint を使用した JSON のシンタックスチェックを行います。

- "nim"
  nim を使用した nim のシンタックスチェックを行います。

- "redpen"
  redpen を使用した自然言語で書かれた文書のチェックを行います。

- "textlint"
  textlint を使用した自然言語で書かれた文書のチェックを行います。
  textlint/textlint - https://github.com/textlint/textlint

- "mdl"
  mdl を使用した markdown のシンタックスチェックを行います。
  mivok/markdownlint - https://github.com/mivok/markdownlint

- "eslint-md"
  eslint-md で markdown 内の JavaScript コードのシンタックスチェックを行います。
  wooorm/eslint-md - https://github.com/wooorm/eslint-md

- "yaml-lint"
  yaml-lint で yaml のシンタックスチェックを行ないます。
  Pryz/yaml-lint - https://github.com/Pryz/yaml-lint

- "rustc"
  rustc を使用した Rust のシンタックスチェックを行います。

- "rustc_parse-only"
  rustc を使用した Rust のシンタックスチェックを行います。
  "rustc" との違いは `no-trans` オプションを使用します。


各ツールを使用する為に予め Vim から使えるようにしておく必要があります。
各ツールの細かい設定は autoload/watchdogs.vim に定義されている
|g:watchdogs#default_config| を参照して下さい。


また、各 filetype に対応しているデフォルトの設定は次の通りになります。

- "cpp"
  デフォルト : "watchdogs_checker/g++"

- "ruby"
  デフォルト : "watchdogs_checker/ruby"

- "java"
  デフォルト : "watchdogs_checker/javac"

- "javascript"
  デフォルト : "watchdogs_checker/jshint"

- "haskell"
  デフォルト : "watchdogs_checker/ghc-mod"

- "python"
  デフォルト : "watchdogs_checker/pyflakes"

- "perl"
  デフォルト : "watchdogs_checker/perl"

- "php"
  デフォルト : "watchdogs_checker/php"

- "lua"
  デフォルト : "watchdogs_checker/luac"

- "d"
  デフォルト : "watchdogs_checker/dmd"

- "go"
  デフォルト : "watchdogs_checker/gofmt"

- "c"
  デフォルト : "watchdogs_checker/c"

- "scala"
  デフォルト : "watchdogs_checker/scalac"

- "sh"
  デフォルト : "watchdogs_checker/sh"

- "zsh"
  デフォルト : "watchdogs_checker/zsh"

- "sass"
  デフォルト : "watchdogs_checker/sass"

- "scss"
  デフォルト : "watchdogs_checker/scss"

- "typescript"
  デフォルト : "watchdogs_checker/tsc"

- "coffee"
  デフォルト : "watchdogs_checker/coffee"

- "vim"
  デフォルト : "watchdogs_checker/vint"

- "haml"
  デフォルト : "watchdogs_checker/haml"

- "json"
  デフォルト : "watchdogs_checker/jsonlint"

- "nim"
  デフォルト : "watchdogs_checker/nim"

- "markdown"
  デフォルト : "watchdogs_checker/redpen"

- "yaml"
  デフォルト : "watchdogs_checker/yaml-lint"

- "rust"
  デフォルト : "watchdogs_checker/rustc"

==============================================================================
コンフィグ					*watchdogs-config*

|watchdogs.vim| は |g:quickrun_config| に設定を記述する事によって、filetype ごと
に使用するツールを設定したり、新しいツールの設定を追加することが出来ます。

どの watchdogs_checker/* の設定を使用するかは次のような順で決定されます。

1．コマンドラインで指定された -type の値
2．|b:watchdogs_checker_type|
3．|g:quickrun_config| の &filetype/watchdogs_checker の type の値


------------------------------------------------------------------------------
filetype ごとにツールを設定			*watchdogs-config-filetype*

記述されているツールの設定を filetype ごとで使用する為には
g:quickrun_config.{filetype}/watchdogs_checker.type に記述します。

Example >
	" filetype=javascript で使用するツールを jshint にする
	let g:quickrun_config["javascript/watchdogs_checker"] = {
	\	"type" : "watchdogs_checker/jshint"
	\}

	" filetype=cpp で使用するツールを g++ にし、オプションも追加する
	let g:quickrun_config["cpp/watchdogs_checker"] = {
	\	"type" : "watchdogs_checker/g++",
	\	"cmdopt" : "-Wall",
	\}
<


また、b:watchdogs_checker_type に設定することで、それを使用する事も出来ます。

Example >
	" そのバッファで使用される設定を記述
	let b:watchdogs_checker_type = "watchdogs_checker/clang"
<

b:watchdogs_checker_type は g:quickrun_config に書かれている設定より優先順位が
高いです。


------------------------------------------------------------------------------
ツールの設定を追加				*watchdogs-config-tools*

g:quickrun_config.watchdogs_checker/{tool-name} に設定を記述します。

Example >
	" jshint の設定を記述する
	" 指定するオプションなどは quickrun と同じ
	let g:quickrun_config["watchdogs_checker/jshint"] = {
	\	"command" : "jshint",
	\	"exec"    : "%c %s:p",
	\	"quickfix/errorformat" : "%f: line %l\\,\ col %c\\, %m",
	\}
<

また、同名の config に設定を追加する事も出来ます。

Example >
	" filetype=cpp で使用するツールを g++ にし、オプションも追加する
	let g:quickrun_config["cpp/watchdogs_checker"] = {
	\	"type" : "watchdogs_checker/cpp",
	\	"cmdopt" : "-Wall",
	\}
<


------------------------------------------------------------------------------
watchdogs_checker/* 全てに共通する設定を定義	*watchdogs-config-default*

|g:quickrun_config| の watchdogs_checker/_ に watchdogs_checker/* の全てに適用
される設定を記述することができます。
これは |watchdogs#setup()| 時にすべての watchdogs_checker/* に設定が追加され
ます。
すべての watchdogs_checker/* で共通の設定を行いたい場合はこれに設定を行ってく
ださい。
ここに記述された設定は各 watchdogs_checker/* よりも優先順位が低いです。

>
	" :WatchdogsRun の出力先を buffer に指定する
	let g:quickrun_config["watchdogs_checker/_"] = {
	\	"outputter" : "buffer",
	\}

	" :WatchdogsRun -type watchdogs_checker/clang
	" の場合は quickfix へ出力する
	let g:quickrun_config["watchdogs_checker/clang"] = {
	\	"outputter" : "quickfix",
	\}
<

quickrun_config の詳細は |b:quickrun_config| を参照して下さい。


==============================================================================
自動シンタックスチェック			*watchdogs-auto*

任意のタイミングで自動的にシンタックスチェックを行う為の設定です。
また、この設定では |:QuickRun| が起動中にはシンタックスチェックは行われませ
ん。


------------------------------------------------------------------------------
ファイルの書き込み後				*watchdogs-auto-BufWritePost*

ファイルの書き込み後に自動的に |:WatchdogsRunSilent| を実行します。
デフォルトでは無効になっているので使用するためには、
|g:watchdogs_check_BufWritePost_enable|
もしくは、
|g:watchdogs_check_BufWritePost_enables|
を設定して有効にする必要があります。


Example >
	" 有効にする filetype を 1 に設定する
	" haskell と cpp のみを有効
	let g:watchdogs_check_BufWritePost_enables = {
	\	"cpp"     : 1,
	\	"haskell" : 1
	\}

	" 全ての filetype を有効にする
	" 使用できない設定の場合、エラーが出る場合があるので注意
	let g:watchdogs_check_BufWritePost_enable = 1

	" 0 を設定することで一部の filetype のみ無効にする事ができる
	" これは g:watchdogs_check_BufWritePost_enable よりも優先順位が高い
	let g:watchdogs_check_BufWritePost_enables = {
	\	"javascript" : 0
	\}
<


------------------------------------------------------------------------------
一定時間キー入力がなかった場合にチェックを行う	*watchdogs-auto-CursorHold*

一定時間キー入力が行われなかった場合に |:WatchdogsRunSilent| を実行します。
時間は |updatetime| に依存します。
また、この設定ではファイル書き込み後に1度しか行われません。
（ファイルに書き込んでいなければ、2回以上チェックが行われない。

Example >
	" 有効にする filetype を 1 に設定する
	" haskell と cpp のみを有効
	let g:watchdogs_check_CursorHold_enables = {
	\	"cpp"     : 1,
	\	"haskell" : 1
	\}

	" 全ての filetype を有効にする
	" 使用できない設定の場合、エラーが出る場合があるので注意
	let g:watchdogs_check_CursorHold_enable = 1

	" 0 を設定することで一部の filetype のみ無効にする事ができる
	" これは g:watchdogs_check_CursorHold_enable よりも優先順位が高い
	let g:watchdogs_check_CursorHold_enables = {
	\	"javascript" : 1
	\}
<


==============================================================================
インターフェース				*watchdogs-interface*

------------------------------------------------------------------------------
コマンド					*watchdogs-commands*

:WatchdogsRun					*:WatchdogsRun*
	現在のバッファのシンタックスチェックを行います。
	使用されるシンタックスチェックは |g:quickrun_config| を参照して決定さ
	れます。

:WatchdogsRunSilent				*:WatchdogsRunSilent*
	|:WatchdogsRun| とは違い、不正な設定だった場合にエラー出力が行われませ
	ん。

:WatchdogsRunSweep				*:WatchdogsRunSweep*
	|watchdogs.vim| を強制終了させます。
	内部では |quickrun#sweep_sessions()| を呼び出しているだけなので詳しい
	挙動に関してはそちらを参照して下さい。


------------------------------------------------------------------------------
関数						*watchdogs-functions*

watchdogs#setup({config})			*watchdogs#setup()*
	{config} に対して watchdogs.vim が定義している |g:quickrun_config| の
	設定を追加します。
	この関数は |:WatchdogsRun| の初回起動時に呼び出され
	|g:quickrun_config| へと設定を追加します。
	|g:quickrun_config| の値を変更した場合、この関数を使用して設定を追加す
	る方がより安全です。

Example: >
	" ユーザ側で g:quickrun_config を定義
	let g:quickrun_config = {
		...
	\}
	
	" watchdogs.vim の設定を追加
	call watchdogs#setup(g:quickrun_config)
<

==============================================================================
設定						*watchdogs-setting*

------------------------------------------------------------------------------
変数						*watchdogs-variables*

g:watchdogs_check_BufWritePost_enable		 *g:watchdogs_check_BufWritePost_enable*
	ファイル書き込み時の自動チェックの制御を行います。
	詳しくは |watchdogs-auto-BufWritePost| を参照して下さい。
>
	" Default
	let g:watchdogs_check_BufWritePost_enable = 0
<

g:watchdogs_check_BufWritePost_enables		 *g:watchdogs_check_BufWritePost_enables*
	ファイル書き込み時の自動チェックの制御を行います。
	詳しくは |watchdogs-auto-BufWritePost| を参照して下さい。
	|g:watchdogs_check_BufWritePost_enable| とは違い、filetype ごとの設定を
	行います。
	|g:watchdogs_check_BufWritePost_enable| よりも優先順位は高いです。
>
	" Default
	let g:watchdogs_check_BufWritePost_enables = {}
<

g:watchdogs_check_CursorHold_enable	 *g:watchdogs_check_CursorHold_enable*
	一定時間キー入力がなかった場合の自動チェックの制御を行います。
	詳しくは |watchdogs-auto-CursorHold| を参照して下さい。
>
	" Default
	let g:watchdogs_check_CursorHold_enable = 0
<

g:watchdogs_check_CursorHold_enables	 *g:watchdogs_check_CursorHold_enables*
	一定時間キー入力がなかった場合の自動チェックの制御を行います。
	詳しくは |watchdogs-auto-CursorHold| を参照して下さい。
	|g:watchdogs_check_CursorHold_enable| とは違い、filetype ごとの設定を
	行います。
	|g:watchdogs_check_CursorHold_enable| よりも優先順位は高いです。
>
	" Default
	let g:watchdogs_check_CursorHold_enables = {}
<
b:watchdogs_checker_type			*b:watchdogs_checker_type*
	そのバッファで使用する設定名です。
Example >
	" そのバッファで使用される設定を記述
	let b:watchdogs_checker_type = "watchdogs_checker/clang"
<<
g:watchdogs_check_BufWritePost_enable_on_wq
				*g:watchdogs_check_BufWritePost_enable_on_wq*
	0 が設定されている場合、|:wq| 時に |watchdogs-auto-BufWritePost|
	が実行されなくなります。
Default: >
	let g:watchdogs_check_BufWritePost_enable_on_wq = 1
<


==============================================================================
設定例						*watchdogs-examples*

いくつかの g:quickrun_config の設定例です。
ユーザ側で watchdogs.vim の拡張を行いたい場合に参考にして下さい。


------------------------------------------------------------------------------
C++						*watchdogs-examples-cpp*

Example: >
	" gcc と clang にオプションを追加する
	let g:quickrun_config = {
	\	"watchdogs_checker/g++" : {
	\		"cmdopt" : "-Wall",
	\	},
	\
	\	"watchdogs_checker/clang++" : {
	\		"cmdopt" : "-Wall",
	\	},
	\
	\}
	
	" watchdogs.vim の設定を追加
	call watchdogs#setup(g:quickrun_config)
<

------------------------------------------------------------------------------
quickfix のエラーフォマットを指定する		*watchdogs-examples-erroformat*
任意の watchdogs_checker/* に quickfix/errorformat を設定します。

Example: >
	" jshint のエラーフォマットを設定する
	let g:quickrun_config = {
	\	"watchdogs_checker/jshint" : {
	\		"quickfix/errorformat" : "%f: line %l\\,\ col %c\\, %m",
	\	},
	\}
	
	" watchdogs.vim の設定を追加
	call watchdogs#setup(g:quickrun_config)
<


------------------------------------------------------------------------------
command を変更する				*watchdogs-examples-command*

Example: >
	" pyflakes のパスを変更する
	let g:quickrun_config = {
	\	"watchdogs_checker/pyflakes" : {
	\		"command" : "C:/Python27/Scripts/pyflakes",
	\	},
	\}
	
	" watchdogs.vim の設定を追加
	call watchdogs#setup(g:quickrun_config)
<


------------------------------------------------------------------------------
quickfix ウィンドウを自動的に閉じる		*watchdogs-examples-close_quickfix*
|watchdogs-examples-unopen_quickfix| も一緒に参照してください。

Example: >
	" hook-close_quickfix を有効にする
	" quickrun.vim の終了時に quickfix を閉じる
	let g:quickrun_config = {
	\	"watchdogs_checker/_" : {
	\		"hook/close_quickfix/enable_exit" : 1,
	\	},
	\}
	
	" watchdogs.vim の設定を追加
	call watchdogs#setup(g:quickrun_config)
<

NOTE: この設定を使用した場合、ウィンドウ分割を利用していると意図しないウィン
ドウへ移動する可能性があります。
その場合は |watchdogs-examples-unopen_quickfix| を使用してください。


------------------------------------------------------------------------------
quickfix ウィンドウを開かせない		*watchdogs-examples-unopen_quickfix*

|quickfix| ウィンドウが開いてほしくない場合、
|watchdogs-examples-close_quickfix| よりもこちらの設定の方が有効です。

Example: >
	let g:quickrun_config = {
	\	"watchdogs_checker/_" : {
	\		'outputter/quickfix/open_cmd' : '',
	\	},
	\}
	
	" watchdogs.vim の設定を追加
	call watchdogs#setup(g:quickrun_config)
<


------------------------------------------------------------------------------
vimproc の更新間隔を短くする			*watchdogs-examples-updatetime*

'updatetime' の値が大きい場合、出力されるまでにタイムラグがある可能性がありま
す。
その場合は、vimproc/updatetime の値を小さくして、更新の間隔を短くする事で解決
します。

Example: >
	" runner/vimproc/updatetime に設定する
	let g:quickrun_config = {
	\	"watchdogs_checker/_" : {
	\		"runner/vimproc/updatetime" : 40,
	\	},
	\}
	
	" watchdogs.vim の設定を追加
	call watchdogs#setup(g:quickrun_config)
<


------------------------------------------------------------------------------
一部の filetype のみ無効にする			*watchdogs-examples-disable*

|g:watchdogs_check_BufWritePost_enable| や
|g:watchdogs_check_CursorHold_enable| などの一部の filetype のみ無効にします。

'updatetime' の値が大きい場合、出力されるまでにタイムラグがある可能性がありま
す。
その場合は、vimproc/updatetime の値を小さくして、更新の間隔を短くする事で解決
します。

Example: >
	" ファイル保存時のシンタックスチェックを有効にする
	let g:watchdogs_check_BufWritePost_enable = 1
	
	" haskell のみ無効にする
	let g:watchdogs_check_BufWritePost_enables = {
	\	"haskell" : 0
	\}
<


------------------------------------------------------------------------------
新しいツールを定義する				*watchdogs-examples-add_tool*

シンタックスチェックを行う設定を追加します。
使用できるようになるまで、2段階あり、
まずは、watchdogs_checker/{tool-name} にツールの設定を記述し、その設定を使用する
{filetype}/watchdogs_checker を設定します。
設定するオプションの細かい設定は |quickrun-options| を参照して下さい。


Example: >
	let g:quickrun_config = {}

	" 新しいツールの設定を追加
	" g:quickrun_config.watchdogs_checker/{tool-name} に設定する
	"
	" command はツールのコマンド
	" exec の各オプションは
	" %c   : command
	" %o   : cmdopt
	" %s:p : ソースファイルの絶対パス
	" に展開される
	let g:quickrun_config["watchdogs_checker/g++"] = {
	\	"command"   : "g++",
	\	"exec"      : "%c %o -std=gnu++0x -fsyntax-only %s:p ",
	\}
	
	
	" 定義したツールを使用する filetype を指定する
	" {filetype}/watchdogs_checker を定義
	" type に定義した watchdogs_checker の名前を設定する
	" 固有のコマンドオプションを使用したいのであれば
	" cmdopt
	" に設定する
	let g:quickrun_config["cpp/watchdogs_checker"] = {
	\	"type" : "watchdogs_checker/g++",
	\	"cmdopt" : "-Wall",
	\}
	
	
	" watchdogs.vim の設定を追加
	call watchdogs#setup(g:quickrun_config)

<
------------------------------------------------------------------------------
filetype に対して指定したツールを設定する	*watchdogs-examples-change_tool*

Example: >
	" C++ のシンタックスチェックを g++ にする
	" type に対して使用したい watchdogs_checker/{tool} を設定する
	let g:quickrun_config = {
	\	"cpp/watchdogs_checker" : {
	\		"type" : "watchdogs_checker/g++",
	\	},
	\
	\}
	
	" watchdogs.vim の設定を追加
	call watchdogs#setup(g:quickrun_config)
<
<
------------------------------------------------------------------------------
|:wq| 時に実行されないようにする		*watchdogs-examples-no-run-wq*

|g:watchdogs_check_BufWritePost_enable_on_wq| に 0 を設定します。

Example: >
    let g:watchdogs_check_BufWritePost_enable_on_wq = 0
<





==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
